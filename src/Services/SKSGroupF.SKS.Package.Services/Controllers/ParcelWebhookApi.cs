/*
 * Parcel Logistics Service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.20.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using SKSGroupF.SKS.Package.Services.Attributes;

using Microsoft.AspNetCore.Authorization;
using SKSGroupF.SKS.Package.Services.DTOs.Models;
using System.Diagnostics.CodeAnalysis;
using AutoMapper;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.DependencyInjection;
using SKSGroupF.SKS.Package.Webhooks.Interfaces;
using FluentValidation.AspNetCore;

namespace SKSGroupF.SKS.Package.Services.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    //[ApiController]
    [ExcludeFromCodeCoverage]
    public class ParcelWebhookApiController : ControllerBase
    {
        private readonly IMapper mapper;
        private readonly ILogger logger;
        private readonly IWebhookManager manager;

        [ActivatorUtilitiesConstructor]
        public ParcelWebhookApiController(IMapper mapper, IWebhookManager manager, ILogger<ParcelWebhookApiController> logger)
        {
            this.mapper = mapper;
            this.manager = manager;
            this.logger = logger;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Gets all registered subscriptions for the parcel webhook.</remarks>
        /// <param name="trackingId"></param>
        /// <response code="200">List of webooks for the &#x60;trackingId&#x60;</response>
        /// <response code="404">No parcel found with that tracking ID.</response>
        [HttpGet]
        [Route("/parcel/{trackingId}/webhooks")]
        [ValidateModelState]
        [SwaggerOperation("ApiParcelByTrackingIdWebhooksGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(WebhookResponses), description: "List of webooks for the &#x60;trackingId&#x60;")]
        public virtual IActionResult ApiParcelByTrackingIdWebhooksGet([FromRoute][Required][RegularExpression("^[A-Z0-9]{9}$")] string trackingId)
        {
            logger.LogInformation("Trying to get all webhook.");
            string webhookJson = null;
            WebhookResponses webhooks = new WebhookResponses();

            try
            {
                foreach (var i in manager.GetSubscriptionsByTrackingId(trackingId))
                {
                    webhooks.Add(mapper.Map<WebhookResponse>(i));
                }
                webhookJson = webhooks.ToJson();
            }
            catch (Exception)
            {
                logger.LogError("Failed to get webhooks for specified tracking ID.");
                return StatusCode(404, default(Error));
            }

            logger.LogInformation("Subscribed to parcel successfully.");
            var returnObject = webhookJson != null
            ? JsonConvert.DeserializeObject<WebhookResponses>(webhookJson)
            : default(WebhookResponses);            //TODO: Change the data returned
            return new ObjectResult(returnObject);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Subscribes to a webhook notification for the specific parcel.</remarks>
        /// <param name="trackingId"></param>
        /// <param name="url"></param>
        /// <response code="200">Successful response</response>
        /// <response code="404">No parcel found with that tracking ID.</response>
        [HttpPost]
        [Route("/parcel/{trackingId}/webhooks")]
        [ValidateModelState]
        [SwaggerOperation("ApiParcelByTrackingIdWebhooksPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(WebhookResponse), description: "Successful response")]
        public virtual IActionResult ApiParcelByTrackingIdWebhooksPost([FromRoute][Required][CustomizeValidator(Skip = true)][RegularExpression("^[A-Z0-9]{9}$")] string trackingId, [FromQuery][Required()][CustomizeValidator(Skip = true)] string url)
        {
            logger.LogInformation("Trying to subscribe to a webhook.");
            string webhookJson = null;

            try
            {
                WebhookResponse response = mapper.Map<WebhookResponse>(manager.Subscribe(trackingId, url));
                webhookJson = response.ToJson();
            }
            catch (Exception)
            {
                logger.LogError("Failed to subscribe to a webhook for specified parcel.");
                return StatusCode(404, default(Error));
            }

            logger.LogInformation("Subscribed to parcel successfully.");

            var returnObject = webhookJson != null
            ? JsonConvert.DeserializeObject<WebhookResponse>(webhookJson)
            : default(WebhookResponse);            //TODO: Change the data returned
            return new ObjectResult(returnObject);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Removes an existing webhook subscription.</remarks>
        /// <param name="id"></param>
        /// <response code="200">Success</response>
        /// <response code="404">Subscription does not exist.</response>
        [HttpDelete]
        [Route("/parcel/webhooks/{id}")]
        [ValidateModelState]
        [SwaggerOperation("ApiParcelWebhooksByIdDelete")]
        public virtual IActionResult ApiParcelWebhooksByIdDelete([FromRoute][Required] long? id)
        {
            logger.LogInformation("Trying to remove a webhook subscription.");

            try
            {
                manager.Remove(id);
            }
            catch (Exception)
            {
                logger.LogError("Failed to remove a webhook subscription for specified id.");
                return StatusCode(404, default(Error));
            }

            logger.LogInformation("Removed subscription successfully.");

            return StatusCode(200);
        }
    }
}
